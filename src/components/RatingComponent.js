import React, { useState, useEffect } from 'react';
import '../styles/rating.css';
import { useQuery } from '@tanstack/react-query';
import { fetchProfile } from '../api/profile';

const RatingComponent = () => {
  const [ratingData, setRatingData] = useState({
    averageRating: 0,
    ratingCount: 0,
    ratingStatus: '–ù–æ–≤–∞—á–æ–∫'
  });
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const { data } = useQuery({
        queryKey: ['profile'],
        queryFn: fetchProfile,
        select: (profile) => ({
          rating: profile.averageRating,
          count: profile.ratingCount,
          status: profile.ratingStatus,
        }),
      });
      
    
      if (!data) return null;
    
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–∞–Ω–¥–æ–º–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
// const generateRandomData = () => {
//     const randomRating = (Math.random() * 5).toFixed(1);
//     const randomCount = Math.floor(Math.random() * 100);
//     const statuses = ['–ù–æ–≤–∞—á–æ–∫', '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π', '–ù–∞–¥—ñ–π–Ω–∏–π'];
//     const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
    
//     return {
//       averageRating: parseFloat(randomRating),
//       ratingCount: randomCount,
//       ratingStatus: randomStatus
//     };
//   };

//   useEffect(() => {
//     const fetchRatingData = async () => {
//       try {
//           setLoading(true);
//           if (demoMode) {
//               // –î–µ–º–æ-—Ä–µ–∂–∏–º - –≥–µ–Ω–µ—Ä—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω—ñ –¥–∞–Ω—ñ
//               setTimeout(() => {
//                   setRatingData(generateRandomData());
//                   setLoading(false);
//               }, 500); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
//           } else {
//               // –†–µ–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º - –∑–∞–ø–∏—Ç –¥–æ –±–µ–∫–µ–Ω–¥—É
//               const response = await fetch("https://localhost:7029/api/Profile/user", {
//                   headers: {
//                       'Authorization': `Bearer ${localStorage.getItem('token')}` // –î–æ–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
//                   }
//               });
        
//               if (!response.ok) {
//                   throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é');
//               }
        
//               const data = await response.json();
//               setRatingData({
//                   averageRating: data.averageRating || 0,
//                   ratingCount: data.ratingCount || 0,
//                   ratingStatus: data.ratingStatus || '–ù–æ–≤–∞—á–æ–∫'
//               });
//           }
//       } catch (err) {
//         setError(err.message);
//         console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö:', err);
//       } finally {
//         setLoading(false);
//       }
//     };

//     // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é
//     fetchRatingData();
//   }, []);

//   if (loading) return <div className="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
//   if (error) return <div className="error">{error}</div>;

//   return (
//     <div className="rating-wrapper">
//       <div className="rating">
//         <div className="star">‚òÖ</div>
//         <span className="average-rating">{ratingData.averageRating.toFixed(1)}</span>
//         <span className="rating-count">{ratingData.ratingCount} {getRatingText(ratingData.ratingCount)}</span>
//       </div>
//       <div className="status">
//         <div className="status-icon"></div>
//         <span className="rating-status">{ratingData.ratingStatus}</span>
//       </div>
//     </div>
    //   );
    
    return (
        <div className="rating-wrapper">
          <div className="rating">
            <div className="star-icon">‚≠ê</div>
            <span className="average-rating">{data.rating?.toFixed(1) || '0.0'}</span>
            <span className="rating-counts">{data.count || 0} {getRatingText(data.count)}</span>
          </div>
          <div className="status">
            <div className="status-icon">üëë</div>
            <span className="rating-status">{data.status || '–ù–æ–≤–∞—á–æ–∫'}</span>
          </div>
        </div>
      );
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É "–æ—Ü—ñ–Ω–æ–∫"
const getRatingText = (count) => {
  const lastDigit = count % 10;
  const lastTwoDigits = count % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) return '–æ—Ü—ñ–Ω–æ–∫';
  if (lastDigit === 1) return '–æ—Ü—ñ–Ω–∫–∞';
  if (lastDigit >= 2 && lastDigit <= 4) return '–æ—Ü—ñ–Ω–∫–∏';
  return '–æ—Ü—ñ–Ω–æ–∫';
};

export default RatingComponent;